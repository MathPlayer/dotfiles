#
# ~/.bashrc
#
# This file is sourced by bash for non-login shells.
#

# If not running interactively, don't do anything.
[[ $- != *i* ]] && return

###############################################################################
# The source commands are here because bashrc may use some commands from the
# library
# Source the users commands library if it exists.
if [ -f "${HOME}/.bin/commands.sh" ]; then
  . "${HOME}/.bin/commands.sh"
fi

# Load personal shell rc file.
source_if_exists "${HOME}/.shellrc"

###############################################################################
# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# Use case-insensitive filename globbing
shopt -s nocaseglob

# When changing directory small typos can be ignored by bash
# for example, cd /vr/lgo/apaache would find /var/log/apache
shopt -s cdspell

# Execute cd if a command name that is the name of a directory
shopt -s autocd

# Ignore some controlling instructions
# HISTIGNORE is a colon-delimited list of patterns which should be excluded.
# The '&' is a special pattern which suppresses duplicate entries.
# Ignore the ls command as well
export HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls'

# bash_history length; see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Whenever displaying the prompt, write the previous line to disk
export PROMPT_COMMAND="history -a"

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Load aliases.
source_if_exists "${HOME}/.aliases"

#
# bash-it
#

# Path to the bash it configuration.
export BASH_IT="/home/bogdan/.bash-it"

# Theme.
export BASH_IT_THEME='powerline-plain'
# Prompt sections.
export POWERLINE_PROMPT='python_venv cwd scm'
# Strip some space.
export POWERLINE_COMPACT_BEFORE_FIRST_SEGMENT=1
export POWERLINE_COMPACT_BEFORE_SEPARATOR=1
## Remove branch sign for git.
export POWERLINE_SCM_GIT_CHAR=' '
# Set colors.
# Green status 76
# Red status 196
#export POWERLINE_SCM_DIRTY_COLOR=196
#export POWERLINE_CWD_COLOR=31

# Disabled functionality.
export THEME_CHECK_SUDO=false
export THEME_BATTERY_PERCENTAGE_CHECK=false
export THEME_SHOW_RUBY_PROMPT=false

# Set to false to turn off version control status checking within the prompt for all themes.
export SCM_CHECK=true

# Load Bash It
source "${BASH_IT}/bash_it.sh"

# Enabled aliases/plugins/completions.
ALIAS="docker docker-compose general git"
PLUGIN="base git history man powerline"
COMPLETION="bash-it defaults docker docker-compose git pip3 ssh system"

# Bash-it does not keep the enabled components in a config file.
# Workaround to enable them only once if the enabled directory is not created.
if [ ! -d ${BASH_IT}/enabled ]; then
  echo "=== Initializing bash-it for the first time. ==="
  for component in "ALIAS" "PLUGIN" "COMPLETION"; do
    CMD="bash-it enable ${component,,} ${!component}"
    echo "=== ${CMD}"
    ${CMD}
    unset CMD
  done
fi

unset ALIASES
unset PLUGINS
unset COMPLETIONS
