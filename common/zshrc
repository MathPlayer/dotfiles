#!/usr/bin/env zsh
#
# ~/.zshrc
#
# NOTE:
# The shebang is needed only to set the filetype automatically,
# not for executing the file.
#

# Use zprof for debugging startup performance. Keep commented. Nice to have around.
# zmodload zsh/zprof

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi


## Preliminary setup.

OS_NAME="$(uname -s)"

## Generic Linux-like exports
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$XDG_CONFIG_HOME/local/share"
export XDG_CACHE_HOME="$XDG_CONFIG_HOME/cache"

# Load my functions. TODO: check if some/all can be removed.
source "${HOME}/.bin/commands.sh"

# The oh-my-zsh SSH plugin requires some settings before loading. Used only on macOS.
[[ ${OS_NAME} = Darwin ]] && zstyle :omz:plugins:ssh-agent agent-forwarding on


## zgenom

source "${HOME}/.zgenom/zgenom.zsh"

# Check for plugin and zgenom updates every 7 days.
# This does not increase the startup time.
zgenom autoupdate --background

# Create the zgenom initialization script if it doesn't exist.
if ! zgenom saved; then
  echo "Creating a zgenom save"

  # zgenom load zsh-users/zsh-syntax-highlighting
  zgenom load zdharma-continuum/fast-syntax-highlighting
  # Change pasted text highlighting. From:
  # https://github.com/zdharma-continuum/fast-syntax-highlighting/issues/25#issuecomment-1094035433
  zle_highlight=('paste:none')

  # Enhanced filetype highlighting
  zgenom load trapd00r/zsh-syntax-highlighting-filetypes

  zgenom load zsh-users/zsh-completions
  zgenom load zsh-users/zsh-autosuggestions

  # Provide substring search in history.
  # ZSH only matches the first word in commands using up-line-or-search/down-line-or-search.
  zgenom load zsh-users/zsh-history-substring-search

  # Best ZSH theme :)
  zgenom load romkatv/powerlevel10k powerlevel10k

  # Cache "eval" loads to improve shell startup time.
  # Useful if the "eval" stays the same for long periods of time.
  zgenom load mroth/evalcache

  # Load custom *env files when entering/exiting a folder
  zgenom load Tarrasch/zsh-autoenv

  # Recommend aliases when using full-blown commands
  zgenom load MichaelAquilina/zsh-you-should-use
  export YSU_MESSAGE_POSITION="after"
  export YSU_MODE="ALL"

  # Real-time, type-ahead completions and suggestions.
  # NOTE: Commented out since I find it too disruptive.
  # zgenom load marlonrichert/zsh-autocomplete

  # Oh-my-zsh
  # Note: loading the base library is recommended, but it's slower.
  # In case of weird behavior, resort to loading it + removing the full path for modules:
  # - Add 'zgenom ohmyzsh'.
  # - Change 'zgenom ohmyzsh <path/to/plugin/file.zsh>' to 'zgenom ohmyzsh plugins/<plugin>'.
  if [[ $OS_NAME = Darwin ]]; then
    zgenom ohmyzsh plugins/ssh-agent/ssh-agent.plugin.zsh # Handle ssh-agent starting
    zgenom ohmyzsh plugins/brew/brew.plugin.zsh # Useful for completions of brew tools.
  fi

  # TODO: use more configuration variables to filter out these server-side plugins.
  #zgenom ohmyzsh plugins/azure
  #zgenom ohmyzsh plugins/terraform
  #zgenom load bjkavan/terragrunt-oh-my-zsh-plugin

  # TODO: find more (useful) plugins
  # - integration with KeePassXC

  # save all to initialization script
  zgenom save

  # Compile local zsh files.
  zgenom compile "$HOME/.zshrc"
fi

# Powerlevel10k theme
# To customize the prompt, run `p10k configure` or edit ~/.p10k.zsh.
# TODO: check if possible to use _evalcache
source ~/.p10k.zsh


## Shell configuration

# Change directories without "cd".
setopt AUTO_CD

# Partial prefix match when pressing up/down keys.
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
# Use ALT/Option + left/right arrows to jump between words.
bindkey "\e\e[D" backward-word
bindkey "\e\e[C" forward-word
# Shell history
setopt INC_APPEND_HISTORY_TIME  # Append history to file, as soon as possible.
setopt EXTENDED_HISTORY         # Add timestamps in the history file.
setopt HIST_IGNORE_ALL_DUPS     # Ignore duplicates
setopt HIST_IGNORE_SPACE        # Ignore entries starting with space
setopt HIST_EXPIRE_DUPS_FIRST   # Expire the duplicate first.

# TODO: test zsh with a better mv tool.
# autoload zmv

# Alias to reload history in the current shell.
alias zsh_reload_history="fc -RI"

# Keep 1M entries in the history
export HISTFILE="${HOME}/.zsh_history"
export HISTSIZE=1000000
export SAVEHIST=$HISTSIZE

# Directory stack
setopt AUTO_PUSHD         # Push the current directory visited on the stack.
setopt PUSHD_IGNORE_DUPS  # Do not store duplicates in the stack.
setopt PUSHD_SILENT       # Do not print the directory stack after pushd or popd.

alias dv='dirs -v'
for index ({1..9}) alias "$index"="cd +${index}"; unset index

alias cs=coursier

alias width="tput cols"
alias height="tput lines"
alias cols="tput cols"
alias rows="tput lines"

# Set language defaults.
export LC_ALL="en_US.UTF-8"
export LANG="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"

# Set default settings for LESS.
export LESS="-RFX"

# Set text editors.
#export EDITOR="vim"
export EDITOR="nvim"
export VISUAL="${EDITOR}"

# Set make flags with a default cpu count.
if [[ ! -z "${commands[nproc]}" ]]; then
  export MAKEFLAGS="-j $(nproc)"
elif [[ ! -z "${commands[sysctl]}" ]]; then
  export MAKEFLAGS="-j $(sysctl -n hw.logicalcpu)"
fi

if [[ ! -z "${commands[rg]}" ]] ; then
  export RIPGREP_CONFIG_PATH=${HOME}/.ripgreprc
fi

# Set umask.
umask 027

# Set some sensible ulimits.
ulimit -n 2048


## Custom PATH adjustments

# Build an array of custom paths.
typeset -a custom_paths=(
  # Rust
  "${HOME}/.cargo/bin"
  # Default folder for pip apps/binaries.
  "${HOME}/.local/bin"
  # TODO: ruby/gem default folder for apps/binaries.
)

if [ ! -z ${HOMEBREW_PREFIX} ]; then
  custom_paths+=(
    "${HOMEBREW_PREFIX}/opt/python/libexec/bin"
    "${HOMEBREW_PREFIX}/opt/curl/bin"
    "${HOMEBREW_PREFIX}/opt/sqlite/bin"
    "${HOMEBREW_PREFIX}/opt/llvm/bin"
  )
fi

# Prepend the custom paths to PATH.
prepend_to_path=""
for custom_path in ${custom_paths[@]}; do
  if [ -d "${custom_path}" ]; then
    prepend_to_path="${prepend_to_path}:${custom_path}"
  fi
done

if [ ! -z "${prepend_to_path}" ]; then
  export PATH="${prepend_to_path#:}:${PATH}"
fi
unset prepend_to_path
unset custom_paths


## Tool setup

# mise as a better alternative to asdf :) https://github.com/jdx/mise
# Powerlevel10k doesn't support mise, the additional file replaces ASDF prompts.
_evalcache mise activate zsh && source ~/.p10k.mise.zsh

# Hook direnv into zsh.
# TODO: check if installed.
_evalcache direnv hook zsh


## Completions.

# Load git-extras zsh-completions (assuming git-extras is installed with brew).
# TODO: check if it's possible to use evalcache
if [[ ! -z {HOMEBREW_PREFIX} ]]; then
  source "${HOMEBREW_PREFIX}/opt/git-extras/share/git-extras/git-extras-completion.zsh"
fi


## Aliases.

# list
if [[ ! -z "${commands[eza]}" ]]; then
  alias ls="eza --group-directories-first"
  alias l="ls"
  alias ll="ls -l"
  alias la="ls -a"
  alias lla="ls -la"
  alias lt="eza -T"
  alias lta="eza -Ta"
  alias ltl="eza -Tl"
  alias ltla="eza -Tla"
fi

# git
if [[ ! -z "${commands[git]}" ]]; then
  alias g="git"
  eval $(awk '
    /^\[alias\]/ { aliasSection = 1; next }
    /^\[/ { aliasSection = 0; next }
    aliasSection && !/^#/ && /=/ {
      i = index($0, "=");
      if (i) {
        name = substr($0, 1, i - 1);
        gsub(/[ \t]*/, "", name);
        #
        # TODO: extend to include the value in the git alias.
        # The value can be an external command or include all kinds of quotes,
        # so it should be escaped.
        #
        print "alias g" name "=\"git " name "\"";
      }
    }
    ' ~/.gitconfig)
fi

# Docker
if [[ ! -z "${commands[docker]}" ]] ; then
  alias d="docker"

  alias dco="docker-compose"
  alias dcoup="docker-compose up"
  alias dcoupd="docker-compose up -d"
  alias dcodn="docker-compose down"
  alias dcops="docker-compose ps"
  alias dcopull="docker-compose pull"
  alias dcol="docker-compose logs"
  alias dcolf="docker-compose logs -f"

  alias dcstat="docker ps -q | xargs docker stats --no-stream"
  alias dps="docker ps"
  alias dpsa="docker ps -a"
fi

# GNU tools on macOS.
# TODO: conditionally load them (e.g. if on macOS).
# TODO: rm -> grm conflicts with git rm
# TODO: get all tools from brew starting with 'g' / in coreutils package or similar.
# TODO: offload loading in sync -> slow shell start.
_gnu_tools=(
  # "basename"
  # "base64"
  # "cat"
  # "chmod"
  # "chown"
  # "cut"
  # "dirname"
  "find"
  "head"
  # "md5sum"
  "mkdir"
  # "nohup"
  # "rm"
  # "rmdir"
  # "seq"
  "sed"
  "tail"
  # "tee"
  "tar"
  # "wc"
  # "who"
  # "whoami"
  # "yes"
)
for _tool in ${_gnu_tools[@]}; do
  test -z "${commands[g${_tool}]}" || alias ${_tool}="g${_tool}"
done

# Enhance generic tools.
alias df='df -h'
alias du='du -h'
alias less='less -F'

# Enhance color output for some tools.
for _tool in "grep" "fgrep" "egrep" "diff"; do
  if [[ ! -z $(command -v ${_tool} --color=auto 2>&1) ]]; then
    alias ${_tool}="${_tool} --color=auto"
  fi
done
unset _tool

if [[ ! -z "${commands[vivid]}" ]]; then
  # Theme switch for ls. Assume dark is needed.
  # TODO: find a better way to do this (maybe using the xterm escape sequence for background).
  alias theme-dark="export LS_COLORS=$(vivid generate one-dark)"
  alias theme-light="export LS_COLORS=$(vivid generate one-light)"
  theme-dark
fi

# (z)shell specific
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g C='| wc -l '
alias -g H='| head '
alias -g J='| jq '
alias -g L='| less '
alias -g R='| rg '
alias -g S='| sort '
alias -g T='| tail '

# misc
alias path="echo \${PATH} | tr ':' '\n'"
alias zsh_fpath="echo \${fpath} | tr ' ' '\n'"
alias ftail='tail -f -n+1'
alias myps='ps axo user,tty,ppid,pid,command | grep -vE "grep|ps axo" | grep -E "(USER\s*PPID)|${USER}"'
alias mypsa='ps aux | grep -vE "grep|ps aux" | grep -E "(USER\s*PID)|${USER}"'
alias logssh='ssh > >(tee '${HOME}'/ssh-$(date +"%Y-%m-%d-%H-%M").out) 2> >(tee ssh-$(date +"%Y-%m-%d-%H-%M").err >&2)'
alias prettyjson='python -m json.tool'

# Print all Caesar rotations for a given text.
function caesar() {
  local in_text=$@
  local a=abcdefghijklmnopqrstuvwxyz
  local b=ABCDEFGHIJKLMNOPQRSTUVWXYZ
  local r
  for r in $(seq 0 25); do
    sed "y/$a$b/${a:$r}${a:0:$r}${b:$r}${b:0:$r}/" <<< $in_text
  done
}

# List all zsh completions.
function zsh_comps() {
  local cmd
  local comp
  for cmd comp in ${(kv)_comps:#-*(-|-,*)}; do
    printf "%-32s %s\n" $cmd $comp
  done | sort
}

# Toggle the K8s context shown in the prompt.
function kube-toggle() {
  if (( ${+POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND} )); then
    MY_POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND="${POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND}"
    unset POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND
  else
    POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND="${MY_POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND}"
  fi
  p10k reload
  if zle; then
    zle push-input
    zle accept-line
  fi
}

## Personal/work configuration

export MACHINE_TYPE="personal"  # To be set to "work" by the ~/work/.zshrc.

_work_dir="${HOME}/work"
if [ -d "${_work_dir}" ]; then
  export MY_WORK_DIR="${_work_dir}"
  source_if_exists "${_work_dir}/.zshrc"
fi
unset _work_dir

# Personal bin exported at the end to be first in PATH.
export PATH="${HOME}/.bin:${PATH}"


## Misc

[[ $OS_NAME != Darwin ]] && export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent.socket"

# Custom config for VSCode.
if [[ "$TERM_PROGRAM" == "vscode" ]]; then
  bindkey -e
fi


## Cleanup
unset OS_NAME


# Use zprof for debugging startup performance. Keep commented. Nice to have around.
# zprof
