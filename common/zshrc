#!/usr/bin/env zsh
#
# ~/.zshrc
#
# The shebang is needed only to set the filetype automatically, not for executing the file.

#########
# Use zprof for debugging startup performance. Keep comented. Nice to have around.
# zmodload zsh/zprof

#########
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#########
# Load my functions.
source "${HOME}/.bin/commands.sh"

########
# Cache (home)brew path.
if command_exists brew; then
  brew_dir="$(brew --prefix)"
fi

#########
# Custom paths.

# Build an array of custom paths.
typeset -a custom_paths=(
  # Rust
  "${HOME}/.cargo/bin"
  # Default folder for pip apps/binaries.
  "${HOME}/.local/bin"
  # TODO: ruby/gem default folder for apps/binaries.
)

if [ ! -z ${brew_dir} ]; then
  # TODO: Check if /usr/local/bin is already in $PATH.
  # If brew is installed in the default path, this adds a duplicate.
  custom_paths+=(
    "${brew_dir}/bin"
    "${brew_dir}/sbin"
    "${brew_dir}/opt/python/libexec/bin"
    "${brew_dir}/opt/curl/bin"
    "${brew_dir}/opt/sqlite/bin"
    "${brew_dir}/opt/llvm/bin"
  )
fi

# Prepend the custom paths to PATH.
prepend_to_path=""
for custom_path in ${custom_paths[@]}; do
  if [ -d "${custom_path}" ]; then
    prepend_to_path="${prepend_to_path}:${custom_path}"
  fi
done

if [ ! -z "${prepend_to_path}" ]; then
  export PATH="${prepend_to_path#:}:${PATH}"
fi
unset prepend_to_path
unset custom_paths



# The SSH plugin requires this setting before loading
zstyle :omz:plugins:ssh-agent agent-forwarding on

# load zgenom
source "${HOME}/.zgenom/zgenom.zsh"

# Check for plugin and zgenom updates every 7 days. This does not increase the startup time.
zgenom autoupdate --background

# create the zgenom init script if it doesn't exist
if ! zgenom saved; then
  echo "Creating a zgenom save"

  # zgenom load zsh-users/zsh-syntax-highlighting
  zgenom load zdharma-continuum/fast-syntax-highlighting

  # Enhanced filetype highlighting
  zgenom load trapd00r/zsh-syntax-highlighting-filetypes

  zgenom load zsh-users/zsh-completions
  zgenom load zsh-users/zsh-autosuggestions

  # Provide susbtring search in history.
  # ZSH only matches the first word in commands using up-line-or-search/down-line-or-search.
  zgenom load zsh-users/zsh-history-substring-search

  # Best ZSH theme :)
  zgenom load romkatv/powerlevel10k powerlevel10k

  # Cache "eval" loads to improve shell startup time. Useful if the "eval" stays the same for long periods of time.
  zgenom load mroth/evalcache

  # Load custom *env files when entering/exiting a folder
  zgenom load Tarrasch/zsh-autoenv

  # Simpler alternative to cd ../../.. ... ../
  zgenom load Tarrasch/zsh-bd

  # Recommend aliases when using full-blown commands
  zgenom load MichaelAquilina/zsh-you-should-use
  export YSU_MESSAGE_POSITION="after"
  export YSU_MODE="ALL"

  # zgenom load marlonrichert/zsh-autocomplete

  # OMZ
  zgenom ohmyzsh
  zgenom ohmyzsh plugins/ssh-agent # Handle ssh-agent starting
  zgenom ohmyzsh plugins/azure
  zgenom ohmyzsh plugins/terraform
  zgenom load bjkavan/terragrunt-oh-my-zsh-plugin
  # TODO: find more (useful) plugins
  # - dircolors
  # - integration with KeePassXC

  # save all to init script
  zgenom save

  # Compile local zsh files.
  # TODO: should I compile all files?
  zgenom compile "$HOME/.zshrc"
fi



function kube-toggle() {
  if (( ${+POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND} )); then
    MY_POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND="${POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND}"
    unset POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND
  else
    POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND="${MY_POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND}"
  fi
  p10k reload
  if zle; then
    zle push-input
    zle accept-line
  fi
}


#########
# Powerlevel10k theme
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
# TODO: check if possible to use _evalcache
source ~/.p10k.zsh

# mise (previously named rtx) as a better alternative to asdf :) https://github.com/jdx/mise
_evalcache mise activate zsh && source ~/.p10k.mise.zsh

# Hook direnv into zsh. TODO: check if installed.
_evalcache direnv hook zsh

#### Shell config

# Change directories without "cd".
setopt AUTO_CD

# Partial prefix match when pressing up/down keys.
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
# Use ALT/Option + left/right arrows to jump between words.
bindkey "\e\e[D" backward-word
bindkey "\e\e[C" forward-word
# Shell history
setopt INC_APPEND_HISTORY_TIME  # Append history to file, as soon as possible.
setopt EXTENDED_HISTORY         # Add timestamps in the history file.
setopt HIST_IGNORE_ALL_DUPS     # Ignore duplicates
setopt HIST_IGNORE_SPACE        # Ignore entries starting with space
setopt HIST_EXPIRE_DUPS_FIRST   # Expire the duplicate first.

# Alias to reload history in the current shell.
alias zsh_reload_history="fc -RI"

# Keep 1M entries in the history
export HISTFILE="${HOME}/.zsh_history"
export HISTSIZE=1000000
export SAVEHIST=$HISTSIZE

# Directory stack
setopt AUTO_PUSHD         # Push the current directory visited on the stack.
setopt PUSHD_IGNORE_DUPS  # Do not store duplicates in the stack.
setopt PUSHD_SILENT       # Do not print the directory stack after pushd or popd.

alias dv='dirs -v'
for index ({1..9}) alias "$index"="cd +${index}"; unset index

alias cs=coursier

alias width="tput cols"
alias height="tput lines"
alias cols="tput cols"
alias rows="tput lines"


#########
# Misc

# Set language defaults.
export LC_ALL="en_US.UTF-8"
export LANG="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"

# Set default settings for LESS.
export LESS="-RFX"

# Set text editors.
#export EDITOR="vim"
export EDITOR="nvim"
export VISUAL="${EDITOR}"

# Set make flags with a default cpu count.
if command_exists nproc; then
  export MAKEFLAGS="-j $(nproc)"
elif command_exists sysctl; then
  export MAKEFLAGS="-j $(sysctl -n hw.logicalcpu)"
fi

if command_exists rg; then
  export RIPGREP_CONFIG_PATH=${HOME}/.ripgreprc
fi

# Set umask.
umask 027

# Set some sensible ulimits.
ulimit -n 2048


#########
# Aliases.

# list
if command_exists eza; then
  alias ls="eza --group-directories-first"
  alias l="ls"
  alias ll="ls -l"
  alias la="ls -a"
  alias lla="ls -la"
fi

# git
if command_exists git; then
  alias g="git"
  # Convert any git alias from .gitconfig (`git <alias>` gets aliased into shell as `g<alias>`).
  #
  # Idea for improvement: extract the alias itself below.
  # Current: `which gst` shows `gst: aliased to git st`.
  # Desired: `which gst` shows `gst: aliased to git status`.
  for alias in ${${${(0)"$(git config -z --get-regexp '^alias.')"}%%$'\n'*}#alias.}; do
    alias g$alias="git $alias"
  done
fi

# Docker
if command_exists docker; then
  alias d="docker"

  alias dco="docker-compose"
  alias dcoup="docker-compose up"
  alias dcoupd="docker-compose up -d"
  alias dcodn="docker-compose down"
  alias dcops="docker-compose ps"
  alias dcopull="docker-compose pull"
  alias dcol="docker-compose logs"
  alias dcolf="docker-compose logs -f"

  alias dcstat="docker ps -q | xargs docker stats --no-stream"
  alias dps="docker ps"
  alias dpsa="docker ps -a"
fi

# GNU tools on macOS.
# TODO: conditionally load them (e.g. if on macOS).
# TODO: rm -> grm conflicts with git rm
# TODO: get all tools from brew starting with 'g' / in coreutils package or similar.
# TODO: offload loading in sync -> slow shell start.
_gnu_tools=(
  # "basename"
  # "base64"
  # "cat"
  # "chmod"
  # "chown"
  # "cut"
  "dircolors"
  # "dirname"
  "find"
  "head"
  # "md5sum"
  "mkdir"
  # "nohup"
  # "rm"
  # "rmdir"
  # "seq"
  "sed"
  "tail"
  # "tee"
  "tar"
  # "wc"
  # "who"
  # "whoami"
  # "yes"
)
for _tool in ${_gnu_tools[@]}; do
  command_exists "g${_tool}" && alias ${_tool}="g${_tool}"
done

# Enhance generic tools.
alias df='df -h'
alias du='du -h'
alias less='less -F'
# Add automatic color output for some tools.
for _tool in "grep" "fgrep" "egrep" "diff"; do
  command_exists ${_tool} --color=auto && alias ${_tool}="${_tool} --color=auto"
done

# Load dircolors if existing. XXX: Find a better way to do this.
if command_exists dircolors && [ -r "${HOME}/.dircolors" ]; then
  eval "$(dircolors -b "${HOME}/.dircolors")" || eval "$(dircolors -b)"
fi

# Custom config for VSCode.
if [[ "$TERM_PROGRAM" == "vscode" ]]; then
  bindkey -e
fi

# (z)shell specific
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g C='| wc -l '
alias -g H='| head '
alias -g J='| jq '
alias -g L='| less '
alias -g R='| rg '
alias -g S='| sort '
alias -g T='| tail '

# misc
alias path="echo \${PATH} | tr ':' '\n'"
alias zsh_fpath="echo \${fpath} | tr ' ' '\n'"
alias ftail='tail -f -n+1'
alias myps='ps axo user,tty,ppid,pid,command | grep -vE "grep|ps axo" | grep -E "(USER\s*PPID)|${USER}"'
alias mypsa='ps aux | grep -vE "grep|ps aux" | grep -E "(USER\s*PID)|${USER}"'
alias logssh='ssh > >(tee '${HOME}'/ssh-$(date +"%Y-%m-%d-%H-%M").out) 2> >(tee ssh-$(date +"%Y-%m-%d-%H-%M").err >&2)'
alias prettyjson='python -m json.tool'

function caesar() {
  in_text=$@
  a=abcdefghijklmnopqrstuvwxyz
  b=ABCDEFGHIJKLMNOPQRSTUVWXYZ
  for r in $(seq 0 25); do
    sed "y/$a$b/${a:$r}${a:0:$r}${b:$r}${b:0:$r}/" <<< $in_text
  done
}

#########
# Work-related configuration.

_work_dir="${HOME}/work"
if [ -d "${_work_dir}" ]; then
  export MY_WORK_DIR="${_work_dir}"
  source_if_exists "${_work_dir}/.zshrc"
fi
unset _work_dir

#########
# Personal bin exported at the end to be first in PATH.
export PATH="${HOME}/.bin:${PATH}"

## Generic Linux-like exports
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$XDG_CONFIG_HOME/local/share"
export XDG_CACHE_HOME="$XDG_CONFIG_HOME/cache"


########
# Cleanup
unset brew_dir

#########
# Use zprof for debugging startup performance. Keep comented. Nice to have around.
# zprof
