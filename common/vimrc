"
" ~/.vimrc
"

" load plugins using vim-plug
call plug#begin('~/.vim/pluged')

" Syntax plugins
Plug 'sheerun/vim-polyglot'
" Keep commented out until a stable configuration is in place.
" Plug 'vim-syntastic/syntastic'
Plug 'trapd00r/vim-ansicolors' " recognize ANSI color esape sequences

" Color themes
Plug 'altercation/vim-colors-solarized'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'tomasr/molokai'
Plug 'morhetz/gruvbox'
Plug 'arcticicestudio/nord-vim'

" File browser
" All lazy load is commented out for the settings at the end of the file.
Plug 'scrooloose/nerdtree' ", {'on': ['NERDTree', 'NERDTreeToggle', 'NERDTreeFind']}
Plug 'Xuyuanp/nerdtree-git-plugin' ", {'on': ['NERDTree', 'NERDTreeToggle', 'NERDTreeFind']}
Plug 'PhilRunninger/nerdtree-buffer-ops'

" Better statusline.
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Toggle using mouse in vim or not
Plug 'nvie/vim-togglemouse'

" Fuzzy finder
Plug 'yggdroot/leaderf', {'do': './install.sh'}

" Easy commenting
Plug 'scrooloose/nerdcommenter'

" Per-directory vimrc
Plug 'embear/vim-localvimrc'

" c/c++ plugins
" TODO: configure flags for the one below.
Plug 'octol/vim-cpp-enhanced-highlight', {'for': 'cpp'}

" CMake improved syntax
Plug 'pboettch/vim-cmake-syntax', {'for': 'cmake'}

" Xcconfig syntax
Plug 'keith/xcconfig.vim', {'for': 'xcconfig'}

" Xcode project file syntax
Plug 'cfdrake/vim-pbxproj', {'for': 'pbxproj'}

" SWIG file syntax
Plug 'vim-scripts/SWIG-syntax'

" Javascript plugins
Plug 'jelera/vim-javascript-syntax', {'for': 'javascript'}
Plug 'ternjs/tern_for_vim', {'for': 'javascript'}
Plug 'pangloss/vim-javascript', {'for': 'javascript'}
Plug 'maksimr/vim-jsbeautify', {'for': 'javascript'}

" HTML plugins
Plug 'othree/html5.vim', {'for': 'html'}

" Git plugins
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Markdown
Plug 'plasticboy/vim-markdown'

" File-line easy opening plugin
Plug 'bogado/file-line'

" Use vim highlight when using cat in command-line.
Plug 'ofavre/vimcat'

" Diff directories.
Plug 'will133/vim-dirdiff'

" Own configuration plugins
Plug '~/.vim/my-configs'

" Tags viewer.
Plug 'liuchengxu/vista.vim'

" Neovim's default LSP
if has('nvim')
  Plug 'neovim/nvim-lsp'
endif

call plug#end()


" explicitly get out of vi-compatible mode
set nocompatible
" fast terminal buffering
set ttyfast


"----- appearance -----"

set termguicolors

try
  colorscheme gruvbox
  let g:gitgutter_override_sign_column_highlight=1
catch
try
  colorscheme dracula
catch
try
  " Use same background and differentiate only using colors in diff mode
  let g:nord_uniform_diff_background = 1
  " Enables background for the line number of the current line.
  let g:nord_cursor_line_number_background = 1
  colorscheme nord
catch
try
  colorscheme solarized
  let g:solarized_visibility = "high"
  let g:solarized_contrast = "high"
catch
endtry
endtry
endtry
endtry

set background=dark

" Improve visual performance by not redrawing the screen when executing some commands
set lazyredraw
" use default syntax highlighting
syntax on
" enable filetype detection
filetype on
" enable filetype-specific indenting
filetype indent on
" enable filetype-specific plugins
filetype plugin on
" show line numbers...
set number
" ... except when on quickfix
autocmd FileType qf setlocal nonumber
" show the 'line,columns' on the bar
set ruler
" highlight the cursor line; using this + vertical splits is slow
set cursorline
" show matching brackets
set showmatch
" show tabline if there are at least two tab pages
set showtabline=1
" set text maximum width to 99 (100 including newline) - except when on quickfix
set textwidth=99
if exists('+colorcolumn')
  set colorcolumn=100
  autocmd FileType qf setlocal colorcolumn=
else
  autocmd BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>99v.\+', -1)
  " TODO remove matchadd on quickfix window for older versions of vim
endif
" Always show the signcolumn, except for plugins configured below
autocmd BufRead,BufNewFile * setlocal signcolumn=yes


"----- indent ------"
" copy indent from current line when starting a new line
set autoindent
" smart indent when starting a new line
set smartindent
" c-like indent, more strict than smartindent; do not use them simultanously
"set cindent


"----- tabs -----"
" spaces a tab counts for
set tabstop=2
" spaces inserted when hitting tab in Insert mode
set expandtab
" spaces inserted with reindent operations
set shiftwidth=2
" spaces vim uses when hitting Tab in insert mode
"   - if not equal to tabstop, vim will use a combination of tabs and spaces to
"       make up the desired spacing
"   - if equal to tabstop, vimm will insert spaces/tabs for it, depending
"       whether expandtab in on or off
set softtabstop=2


"----- whitespace -----"
" display whitespace characters
set list
" characters to show for tab, trailing whitespace and normal space
try
  set listchars=tab:→\ ,trail:~,nbsp:·
catch
  set listchars=tab:>\ ,trail:_,nbsp:~
endtry
set showbreak=\\   " the spaces are needed


"----- search -----"
" highlight the search phrase
set hlsearch
" highlight while typing the search phrase
set incsearch
" do case insensitive matching
set ignorecase
" override ignorecase if pattern contains upper case characters
set smartcase


"----- highlight colors -----"
" change search highlight color
highlight Search cterm=NONE ctermfg=black ctermbg=darkblue
" change TODO highlight color
highlight TODO cterm=NONE ctermfg=red ctermbg=black
" change bracket match highlight color
highlight MatchParen ctermfg=red ctermbg=black
" Reset bad spelling highlight, use only underline
highlight clear SpellBad
highlight SpellBad cterm=underline
" Improve SignColumn color
highlight SignColumn ctermbg=black guibg=darkgrey
highlight SpecialKey cterm=NONE ctermfg=grey


"----- menu and status -----"
" always show the status line
set laststatus=2
" turn on command line completion wild style
set wildmenu
" turn on wild mode huge list
set wildmode=list:longest
" show partial commands in last line of screen
set showcmd


"----- miscellaneous -----"
" use smart backspaces over enumerated elements
set backspace=eol,start,indent
" don't wrap lines
set nowrap
" do not save backup files
set nobackup
" do not save swap files
set noswapfile
" remember 1000 commands and history
set history=1000
" set levels of undo
set undolevels=2000
" splitting a window will put the new one below the current one
set splitbelow
" splitting a window will put the new one right to the current one
set splitright
" use mouse with the new sgr protocol (i.e. useful to scroll on big terminals)
if has('mouse_sgr')
  set ttymouse=sgr
endif
" use mouse (=a -> anywhere possible)
set mouse=a
" set timeout between consecutive characters type when entering a command
" sequence
set timeoutlen=500


"----- key mappings -----"
" map space to leader
nnoremap <SPACE> <Nop>
let mapleader = "\<Space>"
" more efficient command mapping of :
nnoremap ; :
" map sudo save command
cmap w!! w !sudo tee % >/dev/null
" map line moving up and down; can be used in conjunction with numbers
nnoremap - @='ddp'<CR>
nnoremap _ @='ddkP'<CR>
" surround word by quotes or double quotes
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
" go to beginning of the current line
nnoremap H ^
" go to the end of the current line
nnoremap L $
" Edit and reload vimrc
map <leader>ev :e $MYVIMRC<cr>
map <leader>sv :so $MYVIMRC<cr>
" Clear search results by pressing Enter
nnoremap <leader><CR> :noh<CR><CR>
" easy search highlighted text (visual highlight and press //)
vnoremap <expr> // 'y/\V'.escape(@",'\').'<CR>'
" Have <esc> leave cmdline-window (I do not use it)
autocmd CmdwinEnter * nnoremap <buffer> <esc> :q\|echo ""<cr>
"fast buffer switch
nnoremap <A-j> :bprev<CR>
nnoremap <A-k> :bnext<CR>
" switch buffers without save
set hidden
" Change work directory to parent of current file.
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

" set key for paste toogle (when active, the pasted text formatting is not
" modified by any indent feature)
set pastetoggle=<F2>

"----- function to remove trailing whitespace -----"
fun! <SID>StripTrailingWhitespaces()
  let L = line(".")
  let C = col(".")
  %s/\s\+$//e
  call cursor(L, C)
endfun
"---- call above function on each write;
" Internet says it's unsafe if you edit binary files
" XXX: call it on exit for file, not on each write
" FIXME: strip trailing whitespace only on edited lines
" autocmd BufWrite  * :call <SID>StripTrailingWhitespaces()
" Set specific syntax

" objective-c vs octave problem
augroup filetypedetect
  " au! BufRead, BufNewFile *.m,*.oct set filetype=octave
  au! BufRead,BufNewFile,BufRead *.m set filetype=objc
  au! BufRead,BufNewFile,BufRead *.mm set filetype=objcpp
augroup END
augroup filetypedetect
  au! BufRead, BufNewFile *.xcconfig set filetype=xcconfig
augroup END

"-- cscope --"
"set nocscopeverbose " suppress 'duplicate connection' error
"function! LoadCscope()
"  let db = findfile("cscope.out", ".;")
"  if (!empty(db))
"    let path = strpart(db, 0, match(db, "/cscope.out$"))
"    set nocscopeverbose " suppress 'duplicate connection' error
"    exe "cs add " . db . " " . path
"    set cscopeverbose
"  endif
"endfunction
"autocmd BufEnter /* call LoadCscope()



"----- plugin settings -----"

if &runtimepath =~ 'nerdtree'
  " close NERDTree if it's the last window
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  " Remove extra lines
  let NERDTreeMinimalUI = 1
  " Remove signcolumn
  autocmd FileType nerdree setlocal signcolumn=no
  " Mappings
  nnoremap <leader>nn :NERDTreeToggle<CR>
  nnoremap <leader>nf :NERDTreeFind<CR>
  " Use <CR> to open a file in a buffer in the current window.
  let NERDTreeCustomOpenArgs= {'file': {'reuse':'currenttab', 'where':'p', 'keepopen':1, 'stay':1}}
endif

if &runtimepath =~ 'vim-rtags'
  " Use QuickFix window instead of the location list
  let g:rtagsUseLocationList = 0
endif

if &runtimepath =~ 'vim-localvimrc'
  " Don't ask for sourcing a local vimrc file for the same vim session.
  let g:localvimrc_ask=0
endif

if &runtimepath =~ 'leaderf'
  " rg mappings
  noremap <C-F> :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR><CR>
endif

if &runtimepath =~ 'vim-airline'
  " Show status line on top.
  "let g:airline_statusline_ontop = 1

  " enable the enhanced tabline.
  let g:airline#extensions#tabline#enabled = 1
  " Change default ignore pattern list to show terminals.
  let g:airline#extensions#tabline#ignore_bufadd_pat = 'defx|gundo|nerd_tree|startify|tagbar|undotree|vimfiler'
  " configure whether buffer numbers should be shown.
  let g:airline#extensions#tabline#buffer_nr_show = 1
  " Show buffer names using the unique tail algorithm.
  let g:airline#extensions#tabline#formatter = 'unique_tail'
  " Tab separators.
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = ''

  " Enable tagbar integration.
  let g:airline#extensions#tagbar#enabled = 1

endif

if has('nvim')
endif
