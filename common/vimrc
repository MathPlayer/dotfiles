"
" ~/.vimrc
"

" load plugins using vim-plug
call plug#begin('~/.vim/pluged')

" Syntax plugins
Plug 'sheerun/vim-polyglot'
Plug 'vim-syntastic/syntastic'

" Color-related plugins
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'
Plug 'flazz/vim-colorschemes'
Plug 'vim-scripts/ScrollColors'

" Misc plugins
Plug 'scrooloose/nerdtree', {'on': ['NERDTreeToggle', 'NERDTreeFind']}
Plug 'Xuyuanp/nerdtree-git-plugin', {'on': ['NERDTreeToggle', 'NERDTreeFind']}
Plug 'majutsushi/tagbar'
Plug 'nvie/vim-togglemouse'
Plug 'valloric/youcompleteme', {'do': './install.py'}

" Javascript related plugins
Plug 'jelera/vim-javascript-syntax', {'for': 'javascript'}
Plug 'ternjs/tern_for_vim', {'for': 'javascript'}
Plug 'pangloss/vim-javascript', {'for': 'javascript'}
Plug 'maksimr/vim-jsbeautify', {'for': 'javascript'}

" Python related plugins
Plug 'nvie/vim-flake8', {'for': 'python'}

" HTML plugins
Plug 'othree/html5.vim', {'for': 'html'}

" Git plugin
Plug 'tpope/vim-fugitive'

" Own configuration plugins
Plug '~/.vim/my-config'

call plug#end()


" explicitly get out of vi-compatible mode
set nocompatible
" fast terminal buffering
set ttyfast


"----- appearance -----"
" use default syntax highlighting
syntax on
" enable filetype detection
filetype on
" enable filetype-specific indenting
filetype indent on
" enable filetype-specific plugins
filetype plugin on
" show line numbers
set number
" show the 'line,columns' on the bar
set ruler
" show matching brackets.
set showmatch
" show tabline if there are at least two tab pages
set showtabline=2
" set text maximum width to 80
set textwidth=80
if exists('+colorcolumn')
  set colorcolumn=81
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif


"----- indent ------"
" copy indent from current line when starting a new line
set autoindent
" smart indent when starting a new line
set smartindent
" c-like indent, more strict than smartindent; do not use them simultanously
" set cindent


"----- tabs -----"
" spaces a tab counts for
set tabstop=2
" spaces inserted when hitting tab in Insert mode
set expandtab
" spaces inserted with reindent operations
set shiftwidth=2
" spaces vim uses when hitting Tab in insert mode
"   - if not equal to tabstop, vim will use a combination of tabs and spaces to
"       make up the desired spacing
"   - if equal to tabstop, vimm will insert spaces/tabs for it, depending
"       whether expandtab in on or off
set softtabstop=2


"----- whitespace -----"
" display whitespace characters
set list
" characters to show for tab, trailing whitespace and normal space
" keep the second line around for compatibility problems
set listchars=tab:→\ ,trail:~,nbsp:·
"set listchars=tab:>\ ,trail:~,nbsp:·


"----- search -----"
" highlight the search phrase
set hlsearch
" highlight while typing the search phrase
set incsearch
" do case insensitive matching
set ignorecase
" override ignorecase if pattern contains upper case characters
set smartcase
" change search highlight color
highlight Search cterm=NONE ctermfg=grey ctermbg=blue
" change TODO highlight color
highlight TODO cterm=NONE ctermfg=black ctermbg=darkgreen
" change bracket match highlight color
highlight MatchParen ctermfg=red ctermbg=black
highlight clear SpellBad
highlight SpellBad cterm=underline


"----- menu and status -----"
" always show the status line
set laststatus=2
" turn on command line completion wild style
set wildmenu
" turn on wild mode huge list
set wildmode=list:longest
" show partial commands in last line of screen
set showcmd


"----- miscellaneous -----"
" use smart backspaces over enumerated elements
set backspace=eol,start,indent
" don't wrap lines
set nowrap
" do not save backup files
set nobackup
" do not save swap files
set noswapfile
" remember 1000 commands and history
set history=1000
" set levels of undo
set undolevels=2000
" splitting a window will put the new one below the current one
set splitbelow
" splitting a window will put the new one right to the current one
set splitright
" use mouse with the new sgr protocol (i.e. useful to scroll on big terminals)
if has('mouse_sgr')
  set ttymouse=sgr
endif
" use mouse (=a -> anywhere possible)
set mouse=a
" set timeout between consecutive characters type when entering a command
" sequence
set timeoutlen=500


"----- key mappings -----"
" more efficient command mapping of :
nnoremap ; :
" more efficient mapping of <ESC> from insert mode
inoremap jk <esc>
inoremap kj <esc>
" remap different keys to nothing --- still learning to use vi :)
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>
inoremap <esc> <nop>
" map sudo save command
cmap w!! w !sudo tee % >/dev/null
" map line moving up and down
" TODO: find a way to be able to use the mapping in conjunction with numbers
map - ddp
map _ dhd2kp
" surround word by quotes or double quotes
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
" go to beginning of the current line
nnoremap H ^
" go to the end of the current line
nnoremap L $
" Edit and reload vimrc
map <leader>ev :vs $MYVIMRC<cr>
map <leader>sv :so $MYVIMRC<cr>
" Clear search results by pressing Enter
nnoremap <CR> :noh<CR><CR>
" Have <esc> leave cmdline-window (I do not use it)
autocmd CmdwinEnter * nnoremap <buffer> <esc> :q\|echo ""<cr>
" set key for paste toogle (when active, the pasted text formatting is not
" modified by any indent feature)
set pastetoggle=<F2>
" easy search highlighted text (visual highlight and press //)
vnoremap <expr> // 'y/\V'.escape(@",'\').'<CR>'
" keys for NERDTree and Tagbar
nnoremap <silent> <F3> :TagbarToggle<CR>
nnoremap <silent> <F4> :NERDTreeToggle<CR>
nnoremap <silent> <F5> :NERDTreeFind<CR>

"----- function to remove trailing whitespace -----"
fun! <SID>StripTrailingWhitespaces()
  let L = line(".")
  let C = col(".")
  %s/\s\+$//e
  call cursor(L, C)
endfun
"---- call above function on each write;
" Internet says it's unsafe if you edit binary files
" XXX: call it on exit for file, not on each write
" FIXME: strip trailing whitespace only on edited lines
autocmd BufWrite  * :call <SID>StripTrailingWhitespaces()


"----- plugin settings -----"

"-- cscope --"
set nocscopeverbose " suppress 'duplicate connection' error
function! LoadCscope()
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  endif
endfunction
autocmd BufEnter /* call LoadCscope()

"-- tagbar --"
" Do not show any element unfolded
let g:tagbar_foldlevel = 0
" Do not use any extra empty lines
let g:tagbar_compact = 1
" set indentation for folds
let g:tagbar_indent = 1

" Set specific syntax
augroup filetypedetect
  au! BufRead, BufNewFile *.m,*.oct set filetype=octave
augroup END

"-- NERDTree --"
let NERDTreeShowHidden=1

"-- YouCompleteMe --"
let g:ycm_autoclose_preview_window_after_insertion = 1

" always use a dark background
set background=dark
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
colorscheme solarized
